ARTIFACT_START
MASK_START module.c
SNIPPET_START CREATE_PARTITION_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START GLOBAL_INCLUDES
// Test include
#include "test.h"

// Measure include
#include "measure.h"

// Algorithm include
#include "algorithm.h"
SNIPPET_END
SNIPPET_START MODULE_DEFAULTPARTITION_INITIALIZATION
	// Starts up test
	TEST_STARTUP();

	// Starts up measure
	MEASURE_STARTUP();

	// Starts up algorithm
	ALGORITHM_STARTUP();
SNIPPET_END
SNIPPET_START MODULE_DEFAULTPARTITION_VARIABLES
SNIPPET_END
SNIPPET_START MODULE_DESCRIPTION
SNIPPET_END
SNIPPET_START MODULE_FUNCTIONS
int READ_INTEGER(unsigned int *INTEGER) {
	int CHAR1, CHAR2, CHAR3, CHAR4;

	// Receives
	CHAR1 = UARTConsoleGetcTimeout(5000000);

	// Verifies
	if (CHAR1 == -1) {
		return 0;
	}

	// Receives
	CHAR2 = UARTConsoleGetcTimeout(5000);
	CHAR3 = UARTConsoleGetcTimeout(5000);
	CHAR4 = UARTConsoleGetcTimeout(5000);

	// Verifies
	if ((CHAR2 == -1) || (CHAR3 == -1) || (CHAR4 == -1)) {
		return 0;
	}

	// Returns
	*INTEGER = (CHAR1 << 24) | (CHAR2 << 16) | (CHAR3 << 8) | CHAR4;
	return 1;
}

void WRITE_INTEGER(unsigned int INTEGER) {
	int CHAR1, CHAR2, CHAR3, CHAR4;

	// Splits
	CHAR1 = (INTEGER >> 24) & 0xFF;
	CHAR2 = (INTEGER >> 16) & 0xFF;
	CHAR3 = (INTEGER >> 8) & 0xFF;
	CHAR4 = INTEGER & 0xFF;

	// Transmits
	UARTConsolePutc(CHAR1);
	UARTConsolePutc(CHAR2);
	UARTConsolePutc(CHAR3);
	UARTConsolePutc(CHAR4);
}
SNIPPET_END
SNIPPET_START MODULE_GLOBAL_DEFINITIONS
// Definitions
#define HANDSHAKE 0x005AA500
#define RESPONSE_ERROR 0x00000000
#define RESPONSE_SUCCESS 0x11111111
SNIPPET_END
SNIPPET_START MODULE_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START MODULE_IDLEPARTITION_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();

		// Initializes algorithm
		ALGORITHM_INITIALIZE();

		// Configures measurement
		//MEASURE_CONFIGURE(MEASURE_FLAG_BPRED_DIS | MEASURE_FLAG_DCACHE_DIS | MEASURE_FLAG_ICACHE_DIS);
		//MEASURE_CONFIGURE(MEASURE_FLAG_BPRED_DIS | MEASURE_FLAG_DCACHE_DIS | MEASURE_FLAG_ICACHE_ENA);
		//MEASURE_CONFIGURE(MEASURE_FLAG_BPRED_DIS | MEASURE_FLAG_DCACHE_ENA | MEASURE_FLAG_ICACHE_DIS);
		//MEASURE_CONFIGURE(MEASURE_FLAG_BPRED_DIS | MEASURE_FLAG_DCACHE_ENA | MEASURE_FLAG_ICACHE_ENA);
		//MEASURE_CONFIGURE(MEASURE_FLAG_BPRED_ENA | MEASURE_FLAG_DCACHE_DIS | MEASURE_FLAG_ICACHE_DIS);
		//MEASURE_CONFIGURE(MEASURE_FLAG_BPRED_ENA | MEASURE_FLAG_DCACHE_DIS | MEASURE_FLAG_ICACHE_ENA);
		//MEASURE_CONFIGURE(MEASURE_FLAG_BPRED_ENA | MEASURE_FLAG_DCACHE_ENA | MEASURE_FLAG_ICACHE_DIS);
		MEASURE_CONFIGURE(MEASURE_FLAG_BPRED_ENA | MEASURE_FLAG_DCACHE_ENA | MEASURE_FLAG_ICACHE_ENA);

		// Triggers measurement
		MEASURE_TRIGGER();

		// Sets module mode
		//SET_MODULE_MODE(NORMAL, &RETURN_CODE);

		// Waits for measurement
		MEASURE_WAIT();

		// Sets module mode
		//SET_MODULE_MODE(IDLE, &RETURN_CODE);

		// Shows value
		ConsoleUtilsPrintf("Value: %d\n", MEASURE_READ());
SNIPPET_END
SNIPPET_START MODULE_IDLEPARTITION_INITIALIZATION
SNIPPET_END
SNIPPET_START MODULE_INCLUDES
SNIPPET_END
SNIPPET_START SET_MODULE_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_MODULE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_SYSTEM_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
MASK_END
MASK_START partition1.c
SNIPPET_START CREATE_PROCESS_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START GLOBAL_INCLUDES
// Test include
#include "test.h"

// Measure include
#include "measure.h"

// Algorithm include
#include "algorithm.h"
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_ON();
		TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PARTITION1_PROCESS1_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PARTITION1_PROCESS1_PROCESS_BEFORE_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PARTITION1_PROCESS1_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PARTITION1_PROCESS1_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PARTITION1_PROCESS1_PROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PARTITION1_PROCESS1_PROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PARTITION1_PROCESS2_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PARTITION1_PROCESS2_PROCESS_BEFORE_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PARTITION1_PROCESS2_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PARTITION1_PROCESS2_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PARTITION1_PROCESS2_PROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PARTITION1_PROCESS2_PROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PERIODIC_WAIT_ERROR_HANDLING_CODE
			while (true) {
			}
SNIPPET_END
SNIPPET_START SET_PARTITION_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START START_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
MASK_END
MASK_START partition2.c
SNIPPET_START CREATE_PROCESS_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START GLOBAL_INCLUDES
// Test include
#include "test.h"

// Measure include
#include "measure.h"

// Algorithm include
#include "algorithm.h"
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_ON();
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PARTITION2_PROCESS1_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PARTITION2_PROCESS1_PROCESS_BEFORE_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PARTITION2_PROCESS1_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PARTITION2_PROCESS1_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PARTITION2_PROCESS1_PROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PARTITION2_PROCESS1_PROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PARTITION2_PROCESS2_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PARTITION2_PROCESS2_PROCESS_BEFORE_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PARTITION2_PROCESS2_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PARTITION2_PROCESS2_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PARTITION2_PROCESS2_PROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PARTITION2_PROCESS2_PROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PERIODIC_WAIT_ERROR_HANDLING_CODE
			while (true) {
			}
SNIPPET_END
SNIPPET_START SET_PARTITION_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START START_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
MASK_END
MASK_START partition3.c
SNIPPET_START CREATE_PROCESS_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START GLOBAL_INCLUDES
// Test include
#include "test.h"

// Measure include
#include "measure.h"

// Algorithm include
#include "algorithm.h"
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_ON();
		TEST_LED2_ON();

		// Executes algorithm
		if (MEASURE_START()) {
			ALGORITHM_EXECUTE();
			MEASURE_STOP();
		}
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PARTITION3_PROCESS1_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PARTITION3_PROCESS1_PROCESS_BEFORE_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PARTITION3_PROCESS1_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PARTITION3_PROCESS1_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PARTITION3_PROCESS1_PROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PARTITION3_PROCESS1_PROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PERIODIC_WAIT_ERROR_HANDLING_CODE
			while (true) {
			}
SNIPPET_END
SNIPPET_START SET_PARTITION_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START START_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
MASK_END
ARTIFACT_END
